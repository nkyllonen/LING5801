!######################################################################
!# Nikki Kyllonen
!# LING 5801 - Spring 2020
!# 
!# Assignment 2: Finite-State computational morphology with XFST
!######################################################################

### Here are regular expressions for classes of things like vowels and
### consonants to use in later expressions.

define Vowel [a|e|i|o|u|I] ;
define Consonant [b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z] ;

### Create an FST that contains the Finnish noun stems (see finnish_nouns.txt).
read text finnish_stems.txt
define RegNounStem

### Create an FST that relates underlying Number and Case values to
### their surface realizations and concatenate it with the FST for the
### noun stems. Number values and +Sg, +Pl and Case values are +Nom,
### +Part. In the end you should have an FST called FinnishNouns that
### relates forms like "maa+Pl+Part" to "maaITa".

## FEATURE TAGS ##

# map to null since could end a word or attach to case
define Sing "+Sg":0 ;

define Plural "+Pl" .x. I ;

define Nominative "+Nom":0 ; # this null is necessary otherwise "Nom" is output!

define Partitive "+Part" .x. T a ;

# compose LEXICAL TRANSDUCER
define LexT [ RegNounStem Sing Nominative | RegNounStem [ Sing | Plural ] Partitive ] ;

### Implement rules for realizing underlying forms correctly and compose them in the correct order.

# monosyllabic noun stems
define MonoSyllStem [ {puu} | {maa} | {suo} ] ;

# bisyllabic noun stems # TODO: set to RegNounStem - (RegNounStem.intersection(MonosyllStem))
define BiSyllStem [ {tikka} | {pappi} | {kukka} | {tutti} | {kauppa} |
                    {kuoppa} | {jalka} | {linko} | {sopu} | {kampa} |
                    {piispa} | {vahti} | {ilta} | {sota} ] ;

define RoundedSyllStem [{kukka} | {tutti} | {kuoppa} | {sopu} | {sota} ] ;

## RULE TRANSDUCERS ##

define MonoSyllPartitive [ T -> t || MonoSyllStem (I) _ ] ;
define BiSyllPartitive [ T -> 0 || BiSyllStem (I) _ ] ;

define OtherPlural [ I -> i ] ;
define BetweenVowelsPlural [ i -> j || Vowel _ Vowel ] ; # this feels hacky....

define VowelRounding [ a -> o || \a _ I ] ; # don't round if there is an 'a' before
define VowelLowering [ i -> e || _ I ] ;
!define VowelDropping [ a -> 0 || RoundedSyllStem _ I ] ;
define VowelDropping [ a -> 0 || Consonant+ [ u | o ] [ Vowel | Consonant ]+ _ I ] ;
define VowelShortening [ {uu} -> u , {aa} -> a , {ee} -> e ,
                        {ii} -> i, {oo} -> o , {uo} -> o , {ie} -> e || _ I] ;

# compose final RULE TRANSDUCER
define RuleT MonoSyllPartitive .o. BiSyllPartitive .o.
            VowelLowering .o. VowelDropping .o. VowelRounding .o. VowelShortening .o.
            OtherPlural .o. BetweenVowelsPlural ;

### Push your final RE "FinnishNouns" onto the stack, ready for use.
define FinnishNouns LexT .o. RuleT ;
push FinnishNouns
